<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 09, 2010, 3:17 PM -->
<!-- MuClient version 4.51 -->

<!-- Plugin "channel_history" generated by Plugin Wizard -->

<muclient>
<plugin
   name="channel_history"
   author="Tyler S, Oriol G, and Weyoun"
   id="6000a4c6f0e71d31fecf523d"
   language="Lua"
   purpose="Allows reading of messages sorted into categories with hotkeys"
   date_written="2010-04-09 15:14:12"
   requires="4.51"
   version="2.0"
save_state="y"
   >
<description trim="y">
<![CDATA[
The only alias you should need is history_add. Its syntax is:
history_add category=message

Accelerator keys:
alt+right and alt+left = next and previous category
shift+alt+right and left move category.
alt+delete delete a category.
alt+1 through alt+0 - read message 1 through 10. pressing
one of these keys twice within 0.5 seconds will copy the message to the
clipboard, and 3 times will paste it into the command window.

]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   script="history_delete"
   match="^history_delete"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>

  <alias
   script="category_move"
   match="^history_move (\w+)"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>

  <alias
   script="history_add"
   match="^history_add (\w+)=(.*)"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="ttstoggle"
   match="config tts"
   enabled="y"
   omit_from_command_history="y"
keep_evaluating="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_get"
   match="^history_get (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catprev"
   match="history_catprev"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catnext"
   match="history_catnext"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgprev"
   match="^history_msgprev (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgnext"
   match="^history_msgnext (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgcopy"
   match="history_msgcopy"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
modes = {} -- for keyboard states
messages = {}
indices = {}
current_category = 0 -- not set yet
categories = {}

-- set up accelerators
for i = 1, 9 do
Accelerator("alt + " .. i, "history_get " .. i)
end
Accelerator("alt + 0", "history_get 10") -- 10 is a special case
Accelerator("alt + right", "history_catnext")
Accelerator("alt + left", "history_catprev")
Accelerator("alt + down", "history_msgnext 1")
Accelerator("alt + up", "history_msgprev 1")
Accelerator("alt + pagedown", "history_msgnext 10")
Accelerator("alt + pageup", "history_msgprev 10")
Accelerator("alt + end", "history_msgnext 200")
Accelerator("alt + home", "history_msgprev 200")
Accelerator("shift+alt + right", "history_move right")
Accelerator("shift+alt + left", "history_move left")
Accelerator("alt+delete","history_delete")
Accelerator("alt + space", "history_msgprev 0")
Accelerator("alt+shift+space","history_msgcopy")

function history_delete(n,l,w)
 if #categories == 0 then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 messages[categories[current_category]] = nil
 indices[categories[current_category]] = nil
 table.remove(categories, current_category)
 if current_category > #categories then
  current_category = 1
 end
 if #categories > 0 then
  say(categories[current_category])
 else
  say("no more categories.")
 end
end

function category_move(name, line, w)
 if #categories == 0 then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 name = categories[current_category]
 table.remove(categories,current_category)
 if w[1]=="right" then
  current_category = current_category + 1
  if current_category > #categories + 1 then
   current_category = 2
  end
 else
  current_category = current_category - 1
  if current_category < 1 then
   current_category = #categories
  end
 end
 table.insert(categories, current_category, name)
 say("moved.")
end

function OnPluginInstall()
 --SetVariable("tts",GetPluginVariable("553a883096da345ce6897740","tts"))
 SetVariable("tts","1")
end

function ttstoggle(n,l,w)
 SetVariable("tts",GetPluginVariable("553a883096da345ce6897740","tts"))
end

function history_add(name, line, wc)
 local cat, msg = wc[1], wc[2]
 if messages[cat] == nil then
  messages[cat] = {}
  indices[cat] = 0
  table.insert(categories, cat)
 end
 table.insert(messages[cat], msg)
 -- if we go over 100 items, remove the oldest one
 if #messages[cat] > 100 then
  table.remove(messages[cat], 1)
  if indices[cat] > 1 then
   indices[cat] = indices[cat] - 1
  end
 end
end

-- helper function to say stuff
function say(x) 
 if(GetVariable("tts")=="1") then
  Execute("tts_interrupt " .. x)
 else
  Note(x)
 end
end

function history_get(name, line, wc)
 local str = ""
 if current_category == 0 and #categories == 0 then
  say("No categories")
  return
 elseif current_category == 0 and #categories > 0 then
  for i, result in ipairs(categories) do
   if categories[i] == "all" then
    current_category = i
   end
  end
  if current_category > 0 then
   str = str .. "switching to all."
  else
   str = str .. "switching to " .. categories[1] .. ". Use alt left and right arrows to change."
   current_category = 1
  end
 end
 local item = tonumber(wc[1])
 if #messages[categories[current_category]] < item then
  say("no message")
  return
 end

 -- now that all that's out of the way, we can start our real code which should always succeed.
 local timeout = 0.5 -- in seconds
 if modes[item] == nil then
  modes[item] = {os.clock(), 1}
 elseif os.clock()-modes[item][1] >= timeout then
  modes[item][1] = os.clock()
  modes[item][2] = 1
 else
  modes[item][1] = os.clock()
  modes[item][2] = modes[item][2] + 1
 end
 if modes[item][2] > 3 then
  modes[item][2] = 3
 end

 local real_item = #messages[categories[current_category]] + 1 - item
 if modes[item][2] == 1 then
  say(str .. " " .. messages[categories[current_category]][real_item])
 elseif modes[item][2] == 2 then
  SetClipboard(messages[categories[current_category]][real_item])
  say("copied")
 elseif modes[item][2] == 3 then
  PasteCommand(messages[categories[current_category]][real_item])
  say("pasted")
 end
end

function history_catnext(name, line, wc)
 if #categories == 0 then
  say("no categories")
  return
 end
 current_category = current_category + 1
 if current_category > #categories then
  current_category = 1
 end
 say(categories[current_category])
end

function history_catprev(name, line, wc)
 if #categories == 0 then
  say("no categories")
  return
 end
 current_category = current_category - 1
 if current_category < 1 then
  current_category = #categories
 end
 say(categories[current_category])
end

function history_msgnext(name, line, wc)
 local skip = tonumber(wc[1])
 local str = ""
 if #categories == 0 then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 if indices[categories[current_category]] + skip > #messages[categories[current_category]] then
  indices[categories[current_category]] = #messages[categories[current_category]]
  str = str .. "Bottom: "
 else
  indices[categories[current_category]] = indices[categories[current_category]] + skip
 end
 say(str .. messages[categories[current_category]][indices[categories[current_category]]])
end

function history_msgprev(name, line, wc)
 local skip = tonumber(wc[1])
 local str = ""
 if #categories == 0 then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 if indices[categories[current_category]] - skip < 1 then
  indices[categories[current_category]] = 1
  str = str .. "Top: "
 else
  indices[categories[current_category]] = indices[categories[current_category]] - skip
 end
 say(str .. messages[categories[current_category]][indices[categories[current_category]]])
end

function history_msgcopy(name, line, wc)
 if #categories == 0 then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 SetClipboard(messages[categories[current_category]][indices[categories[current_category]]])
 say("copied")
end

]]>
</script>
</muclient>
